# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SuccessfulVoiceAssistantPersonalityCreationResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, personality_id: str=None, name: str=None, description: str=None, gender: str=None, pause_threshold: float=None):  # noqa: E501
        """SuccessfulVoiceAssistantPersonalityCreationResponse - a model defined in Swagger

        :param personality_id: The personality_id of this SuccessfulVoiceAssistantPersonalityCreationResponse.  # noqa: E501
        :type personality_id: str
        :param name: The name of this SuccessfulVoiceAssistantPersonalityCreationResponse.  # noqa: E501
        :type name: str
        :param description: The description of this SuccessfulVoiceAssistantPersonalityCreationResponse.  # noqa: E501
        :type description: str
        :param gender: The gender of this SuccessfulVoiceAssistantPersonalityCreationResponse.  # noqa: E501
        :type gender: str
        :param pause_threshold: The pause_threshold of this SuccessfulVoiceAssistantPersonalityCreationResponse.  # noqa: E501
        :type pause_threshold: float
        """
        self.swagger_types = {
            'personality_id': str,
            'name': str,
            'description': str,
            'gender': str,
            'pause_threshold': float
        }

        self.attribute_map = {
            'personality_id': 'personality_id',
            'name': 'name',
            'description': 'description',
            'gender': 'gender',
            'pause_threshold': 'pauseThreshold'
        }
        self._personality_id = personality_id
        self._name = name
        self._description = description
        self._gender = gender
        self._pause_threshold = pause_threshold

    @classmethod
    def from_dict(cls, dikt) -> 'SuccessfulVoiceAssistantPersonalityCreationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SuccessfulVoiceAssistantPersonalityCreationResponse of this SuccessfulVoiceAssistantPersonalityCreationResponse.  # noqa: E501
        :rtype: SuccessfulVoiceAssistantPersonalityCreationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def personality_id(self) -> str:
        """Gets the personality_id of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :return: The personality_id of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :rtype: str
        """
        return self._personality_id

    @personality_id.setter
    def personality_id(self, personality_id: str):
        """Sets the personality_id of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :param personality_id: The personality_id of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :type personality_id: str
        """

        self._personality_id = personality_id

    @property
    def name(self) -> str:
        """Gets the name of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :return: The name of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :param name: The name of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :return: The description of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :param description: The description of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :type description: str
        """

        self._description = description

    @property
    def gender(self) -> str:
        """Gets the gender of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :return: The gender of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :param gender: The gender of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :type gender: str
        """
        allowed_values = ["Male", "Female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def pause_threshold(self) -> float:
        """Gets the pause_threshold of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :return: The pause_threshold of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :rtype: float
        """
        return self._pause_threshold

    @pause_threshold.setter
    def pause_threshold(self, pause_threshold: float):
        """Sets the pause_threshold of this SuccessfulVoiceAssistantPersonalityCreationResponse.


        :param pause_threshold: The pause_threshold of this SuccessfulVoiceAssistantPersonalityCreationResponse.
        :type pause_threshold: float
        """

        self._pause_threshold = pause_threshold
