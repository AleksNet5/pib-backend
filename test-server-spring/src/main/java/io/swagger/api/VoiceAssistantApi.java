/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AddVoiceAssistantChatMessageRequest;
import io.swagger.model.AddVoiceAssistantChatMessageResponse;
import java.math.BigDecimal;
import io.swagger.model.CreateVoiceAssistantChat;
import io.swagger.model.CreateVoiceAssistantPersonality;
import io.swagger.model.ErrorMessage;
import io.swagger.model.GetAllChats;
import io.swagger.model.GetAllPersonalities;
import io.swagger.model.GetVoiceAssistantChat;
import io.swagger.model.GetVoiceAssistantChatMessages;
import io.swagger.model.SuccessfulVoiceAssistantChatCreationResponse;
import io.swagger.model.SuccessfulVoiceAssistantPersonalityCreationResponse;
import io.swagger.model.UpdateVoiceAssistantChat;
import io.swagger.model.UpdateVoiceAssistantChatRequest;
import io.swagger.model.UpdateVoiceAssistantPersonality;
import io.swagger.model.UpdateVoiceAssistantPersonalityRequest;
import io.swagger.model.VoiceAssistantPersonality;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-02T10:03:56.193162043Z[GMT]")
@Validated
public interface VoiceAssistantApi {

    @Operation(summary = "Deletes voice assistant personality by id", description = "", tags={ "chat" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/chat/{chat_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> voiceAssistantChatChatIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("chat_id") String chatId);


    @Operation(summary = "Get voice assistant chat by id", description = "", tags={ "chat" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GetVoiceAssistantChat.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/chat/{chat_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetVoiceAssistantChat> voiceAssistantChatChatIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("chat_id") String chatId);


    @Operation(summary = "Get voice assistant chat messages by chat id", description = "", tags={ "chat" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GetVoiceAssistantChatMessages.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/chat/{chat_id}/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetVoiceAssistantChatMessages> voiceAssistantChatChatIdMessagesGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("chat_id") String chatId, @Parameter(in = ParameterIn.QUERY, description = "Null the first time. If specified, loads messages before the specified time stamp. Otherwise, loads the most recent messages based on count." ,schema=@Schema()) @Valid @RequestParam(value = "timestamp", required = false) String timestamp, @Parameter(in = ParameterIn.QUERY, description = "Number of messages to be returned." ,schema=@Schema( defaultValue="10")) @Valid @RequestParam(value = "count", required = false, defaultValue="10") BigDecimal count);


    @Operation(summary = "Get voice assistant chat by id", description = "", tags={ "chat" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AddVoiceAssistantChatMessageResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/chat/{chat_id}/messages",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AddVoiceAssistantChatMessageResponse> voiceAssistantChatChatIdMessagesPost(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("chat_id") String chatId, @Parameter(in = ParameterIn.DEFAULT, description = "Adds prompt and the corresponding AI response to a chat based on chat id.", required=true, schema=@Schema()) @Valid @RequestBody AddVoiceAssistantChatMessageRequest body);


    @Operation(summary = "Create new voice assistant personality", description = "", tags={ "chat" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateVoiceAssistantChat.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/chat/{chat_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<UpdateVoiceAssistantChat> voiceAssistantChatChatIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("chat_id") String chatId, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existing voice assistant chat<br>Individual request body attributes may be nullable but all cannot be null", required=true, schema=@Schema()) @Valid @RequestBody UpdateVoiceAssistantChatRequest body);


    @Operation(summary = "Get all voice-assistant chats", description = "", tags={ "chat" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GetAllChats.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/chat",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetAllChats> voiceAssistantChatGet();


    @Operation(summary = "Create new voice assistant chat", description = "", tags={ "chat" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessfulVoiceAssistantChatCreationResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/chat",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulVoiceAssistantChatCreationResponse> voiceAssistantChatPost(@Parameter(in = ParameterIn.DEFAULT, description = "Creates a new voice assistant chat", required=true, schema=@Schema()) @Valid @RequestBody CreateVoiceAssistantChat body);


    @Operation(summary = "Get all voice-assistant personalities", description = "", tags={ "personality" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GetAllPersonalities.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/personality",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetAllPersonalities> voiceAssistantPersonalityGet();


    @Operation(summary = "Deletes voice assistant personality by id", description = "", tags={ "personality" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/personality/{personality_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> voiceAssistantPersonalityPersonalityIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("personality_id") String personalityId);


    @Operation(summary = "Get voice assistant by id", description = "", tags={ "personality" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VoiceAssistantPersonality.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/personality/{personality_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VoiceAssistantPersonality> voiceAssistantPersonalityPersonalityIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("personality_id") String personalityId);


    @Operation(summary = "Create new voice assistant personality", description = "", tags={ "personality" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateVoiceAssistantPersonality.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/personality/{personality_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<UpdateVoiceAssistantPersonality> voiceAssistantPersonalityPersonalityIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("personality_id") String personalityId, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existing voice assistant personality<br>Description requires UTF-8 charset<br> Minimum length = X<br> Maximum length = X<br>Individual request body attributes may be nullable but all cannot be null", required=true, schema=@Schema()) @Valid @RequestBody UpdateVoiceAssistantPersonalityRequest body);


    @Operation(summary = "Create new voice assistant personality", description = "", tags={ "personality" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessfulVoiceAssistantPersonalityCreationResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/voice-assistant/personality",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulVoiceAssistantPersonalityCreationResponse> voiceAssistantPersonalityPost(@Parameter(in = ParameterIn.DEFAULT, description = "Creates a new voice assistant personality<br>Description requires UTF-8 charset<br> Minimum length = X<br> Maximum length = X", required=true, schema=@Schema()) @Valid @RequestBody CreateVoiceAssistantPersonality body);

}

